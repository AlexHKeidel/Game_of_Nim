package RMIGameOfNim;

import java.rmi.RemoteException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 * GameServerJFrame which displays the current state of the server with the help
 * of a text window (log).
 * @author Alexander.Keidel@go.edgehill.ac.uk
 */
public class GameServerJFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameServerJFrame
     * @throws java.rmi.RemoteException
     */
    public GameServerJFrame() throws RemoteException {
        initComponents();
        initGameServer();
    }

    /**
     * Initialise the GameServer, passing a reference of this JFrame to it
     * in order for it to be able to access the frames methods, i.e. for updating
     * the server log.
     * @throws RemoteException 
     */
    private void initGameServer() throws RemoteException{
        try{
            GameServer myServer = new GameServer(this); //creating a new GameServer, passing a reference to this JFrame to it
            appendServerLog("Server Started");
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    
    /**
     * Get the current time in a HH:MM format
     * @return String containing the current time of day in HH:MM format
     */
    private String getTheTime(){
        String time = "" + Calendar.getInstance().get(Calendar.HOUR_OF_DAY); //add the hour of day to a string
        if(time.length() == 1){ //if time is a single digit, i.e. from 1 to 9 o'clock
            time = new StringBuilder(time).insert(0, "0").toString(); //append a 0 before the hour if it is a single digit
        }
        time += ":" + Calendar.getInstance().get(Calendar.MINUTE); //append a colon and the minutes of the hour
        if(time.length() == 4){ //if the time is four digits, i.e. 10:1
            time = new StringBuilder(time).insert(3, "0").toString(); //insert the 0, so 10:1 would become 10:01
        }
        return time;
    }
    
    /**
     * Appends the message log JTextArea with the given String
     * @param message Message to be appended in the Server Log
     */
    public void appendServerLog(final String message){
        System.out.println("Server Message Log update:\n" + message);
        SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                   jTextArea1.append("\n" + getTheTime() + "-> " + message);
                }
            });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ServerMessageLog = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ServerMessageLog.setAutoscrolls(true);
        ServerMessageLog.setName("ServerMessageLog"); // NOI18N

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setName("ServerMessageLog"); // NOI18N
        ServerMessageLog.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ServerMessageLog, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ServerMessageLog, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        ServerMessageLog.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameServerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new GameServerJFrame().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(GameServerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ServerMessageLog;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
